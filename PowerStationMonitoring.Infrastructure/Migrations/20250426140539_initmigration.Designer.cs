// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PowerStationMonitoring.Infrastructure.Data;

#nullable disable

namespace PowerStationMonitoring.Infrasturcture.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250426140539_initmigration")]
    partial class initmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PowerStationMonitoring.Core.Model.Master", b =>
                {
                    b.Property<int>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MasterId"));

                    b.Property<string>("MasterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MasterId");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("PowerStationMonitoring.Core.Model.SensorData", b =>
                {
                    b.Property<int>("SensorDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorDataId"));

                    b.Property<decimal>("MeasuredValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MeasurementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SensorDataId");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("PowerStationMonitoring.Core.Model.Slave", b =>
                {
                    b.Property<int>("SlaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlaveId"));

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("SlaveName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SlaveId");

                    b.HasIndex("MasterId");

                    b.ToTable("Slaves");
                });

            modelBuilder.Entity("PowerStationMonitoring.Domain.Model.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorId"));

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SlaveId")
                        .HasColumnType("int");

                    b.HasKey("SensorId");

                    b.HasIndex("SlaveId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("PowerStationMonitoring.Core.Model.SensorData", b =>
                {
                    b.HasOne("PowerStationMonitoring.Domain.Model.Sensor", "Sensor")
                        .WithMany("SensorData")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("PowerStationMonitoring.Core.Model.Slave", b =>
                {
                    b.HasOne("PowerStationMonitoring.Core.Model.Master", "Master")
                        .WithMany("Slaves")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("PowerStationMonitoring.Domain.Model.Sensor", b =>
                {
                    b.HasOne("PowerStationMonitoring.Core.Model.Slave", "Slave")
                        .WithMany("Sensors")
                        .HasForeignKey("SlaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slave");
                });

            modelBuilder.Entity("PowerStationMonitoring.Core.Model.Master", b =>
                {
                    b.Navigation("Slaves");
                });

            modelBuilder.Entity("PowerStationMonitoring.Core.Model.Slave", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("PowerStationMonitoring.Domain.Model.Sensor", b =>
                {
                    b.Navigation("SensorData");
                });
#pragma warning restore 612, 618
        }
    }
}
